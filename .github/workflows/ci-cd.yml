name: AI Code Assistant CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Run unit tests with pytest
      run: |
        pytest test_app.py -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Test without OpenAI API key (Demo mode)
      run: |
        unset OPENAI_API_KEY
        python -c "from app import AICodeAssistant; assistant = AICodeAssistant(); print('Demo mode test passed')"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  api-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Start application
      run: |
        python app.py &
        sleep 5
      env:
        FLASK_ENV: testing
    
    - name: Test API endpoints
      run: |
        # Test status endpoint
        curl -f http://localhost:5000/api/status
        
        # Test generate endpoint
        curl -X POST http://localhost:5000/api/generate \
          -H "Content-Type: application/json" \
          -d '{"prompt": "Create a hello world function", "language": "python"}' \
          -f
        
        # Test bug detection endpoint
        curl -X POST http://localhost:5000/api/detect-bugs \
          -H "Content-Type: application/json" \
          -d '{"code": "def test(): pass", "language": "python"}' \
          -f
    
    - name: Stop application
      run: |
        pkill -f "python app.py" || true

  build:
    needs: [test, security, api-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create application package
      run: |
        mkdir -p dist
        cp app.py dist/
        cp requirements.txt dist/
        cp .env.example dist/
        cp README.md dist/
        tar -czf ai-code-assistant.tar.gz -C dist .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-package
        path: ai-code-assistant.tar.gz

  docker:
    needs: [test, security, api-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY app.py .
        COPY .env.example .env
        
        # Create non-root user
        RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
        USER appuser
        
        # Expose port
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:5000/api/status || exit 1
        
        # Run application
        CMD ["python", "app.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t ai-code-assistant:latest .
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 5000:5000 ai-code-assistant:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/api/status
        
        # Test generate endpoint
        curl -X POST http://localhost:5000/api/generate \
          -H "Content-Type: application/json" \
          -d '{"prompt": "Create a test function", "language": "python"}' \
          -f
        
        # Stop container
        docker stop test-container
        docker rm test-container
    
    - name: Save Docker image
      run: |
        docker save ai-code-assistant:latest | gzip > ai-code-assistant-docker.tar.gz
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ai-code-assistant-docker.tar.gz

  performance-test:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Create performance test
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        
        class AICodeAssistantUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def test_status(self):
                self.client.get("/api/status")
            
            @task(2)
            def test_generate_code(self):
                payload = {
                    "prompt": "Create a simple function",
                    "language": "python"
                }
                self.client.post("/api/generate", 
                               json=payload,
                               headers={"Content-Type": "application/json"})
            
            @task(1)
            def test_detect_bugs(self):
                payload = {
                    "code": "def test(): pass",
                    "language": "python"
                }
                self.client.post("/api/detect-bugs",
                               json=payload,
                               headers={"Content-Type": "application/json"})
        EOF
    
    - name: Start application for performance testing
      run: |
        python app.py &
        sleep 5
    
    - name: Run performance tests
      run: |
        locust -f locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:5000
    
    - name: Stop application
      run: |
        pkill -f "python app.py" || true

  deploy-staging:
    needs: [build, docker, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying AI Code Assistant to staging environment..."
        echo "This would typically involve:"
        echo "- Downloading build artifacts"
        echo "- Deploying to cloud platform (AWS/Azure/GCP)"
        echo "- Setting up environment variables"
        echo "- Configuring OpenAI API integration"
        echo "- Running smoke tests"

  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying AI Code Assistant to production environment..."
        echo "This would typically involve:"
        echo "- Blue-green deployment"
        echo "- Load balancer configuration"
        echo "- SSL certificate setup"
        echo "- Rate limiting configuration"
        echo "- Monitoring setup"
        echo "- API key management"

  monitoring:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Setup monitoring and alerts
      run: |
        echo "Setting up monitoring for AI Code Assistant..."
        echo "This would configure:"
        echo "- Application performance monitoring"
        echo "- API usage tracking"
        echo "- Error rate monitoring"
        echo "- Response time alerts"
        echo "- OpenAI API usage monitoring"
        echo "- Cost tracking"
    
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ AI Code Assistant deployment successful!"
        else
          echo "❌ AI Code Assistant deployment failed!"
        fi
        echo "Author: Gabriel Demetrios Lafis"
