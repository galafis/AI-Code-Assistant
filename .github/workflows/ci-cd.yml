name: AI Code Assistant CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * 1'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio flake8 black bandit safety mypy
    
    - name: Code formatting check
      run: |
        black --check --diff .
    
    - name: Type checking
      run: |
        mypy . --ignore-missing-imports
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-ai-assistant

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'ai-assistant-demo/package-lock.json'
    
    - name: Install frontend dependencies
      run: |
        cd ai-assistant-demo
        npm ci
    
    - name: Run frontend linting
      run: |
        cd ai-assistant-demo
        npm run lint || true
    
    - name: Run frontend tests
      run: |
        cd ai-assistant-demo
        npm test -- --coverage --watchAll=false || true
    
    - name: Build frontend
      run: |
        cd ai-assistant-demo
        npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio requests
    
    - name: Start AI Assistant server
      run: |
        python advanced_ai_assistant.py &
        sleep 10
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v || true
    
    - name: Stop server
      run: |
        pkill -f "python advanced_ai_assistant.py" || true

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/ -k "benchmark" --benchmark-json=benchmark-results.json || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, test-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Build Docker image
      run: |
        echo "Building Docker image for AI Code Assistant..."
        # Add Docker build commands here
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ai-assistant-build
        path: |
          dist/
          Dockerfile

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ai-assistant-build
    
    - name: Deploy AI Code Assistant
      run: |
        echo "Deploying AI Code Assistant to production..."
        echo "Setting up load balancer and scaling configuration..."
        # Add deployment commands here
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run health checks
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
